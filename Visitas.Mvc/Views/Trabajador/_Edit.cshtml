@model Visitas.Models.Trabajadores

<center>
<h2 class="marron">Editar</h2>
</center>
@Messages.Message("inUse", "Edit", "danger", "Este trabajador esta en uso en este momento.")

@*(Acion , el controlador donde se ubica el action que llamaremos)*@
@using (Ajax.BeginForm("Edit", new { Controller = "Trabajador" },
    new AjaxOptions
    {
        HttpMethod = "POST", //Indicamos el tipo del metodo, sea POST O GET
        InsertionMode = InsertionMode.Replace, // En caso exista, insercion de codigo HTML
        UpdateTargetId = "modal-body", //Este modal-body, esta dentro de la estructura del modal que hemos creado
        OnSuccess = "trabajador.success('edit');trabajador.removeTrabajador('" + Model.Id + "');" //En el caso de existó, llamaremos a esa funcion de Javascript
    },
    htmlAttributes: new { id = "editForm" })
    )
{
    @Html.AntiForgeryToken()
<center>
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Co_Trabajador, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Co_Trabajador, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Co_Trabajador, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.No_Trabajador, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.No_Trabajador, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.No_Trabajador, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Ap_Paterno_Trabajador, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Ap_Paterno_Trabajador, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Ap_Paterno_Trabajador, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Ap_Materno_Trabajador, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Ap_Materno_Trabajador, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Ap_Materno_Trabajador, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tipo_Documento, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.Tipo_Documento, new MultiSelectList(new[] { "DNI", "RUC", "PASAPORTE", "CÉDULA DIPLOMÁTICA DE IDENTIDAD", "CARNET DE EXTRANJERIA", "OTROS" }), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Tipo_Documento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Nu_Documento, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Nu_Documento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nu_Documento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Biografia, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.TextAreaFor(model => model.Biografia, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Biografia, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group hidden">
            @Html.LabelFor(model => model.Estado, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Estado, new { htmlAttributes = new { @Readonly = "readonly", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OficinaId, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.OficinaId, new SelectList(ViewBag.Oficinas, "Id", "No_Oficina")@*, "Elije una opcion"*@      , htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.OficinaId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CargoLaboralId, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.CargoLaboralId, new SelectList(ViewBag.Cargolaboral, "Id", "No_Cargo_Laboral")@*, "Elije una opcion"*@, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CargoLaboralId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-4 col-md-8">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
</center>
    }

<script type="text/javascript">
        $(function () {
            $.validator.unobtrusive.parse("#editForm");
            //Todo lo de abajo es para el SignalR
            $('#inUse').addClass('hidden');//Cuando el modal se abra
            trabajador.addTrabajador("@Model.Id");//Añadimos el id a la lista de bloqueos
            trabajador.validate("@Model.Id");
        });

        trabajador.closeModal = function () {
            //Cuando salgo del modal sin guardar, abajo hacemos que se libere el modal
            if (!trabajador.recordInUse)
                trabajador.removeTrabajador("@Model.Id");
        }
</script>


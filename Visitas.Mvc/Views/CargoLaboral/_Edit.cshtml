@model Visitas.Models.CargosLaborales

<center>
<h2 class="marron">Editar</h2>
</center>
@Messages.Message("inUse", "Edit", "danger", "Este cargo laboral esta en uso en este momento.")

@*(Acion , el controlador donde se ubica el action que llamaremos)*@
@using (Ajax.BeginForm("Edit", new { Controller = "CargoLaboral" },
    new AjaxOptions
    {
        HttpMethod = "POST", //Indicamos el tipo del metodo, sea POST O GET
        InsertionMode = InsertionMode.Replace, // En caso exista, insercion de codigo HTML
        UpdateTargetId = "modal-body", //Este modal-body, esta dentro de la estructura del modal que hemos creado
        OnSuccess = "cargolaboral.success('edit');cargolaboral.removeCargolaboral('" + Model.Id + "');" //En el caso de existó, llamaremos a esa funcion de Javascript
    },
    htmlAttributes: new { id = "editForm" })
    )
{
    @Html.AntiForgeryToken()
<center>
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Co_Cargo_Laboral, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Co_Cargo_Laboral, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Co_Cargo_Laboral, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.No_Cargo_Laboral, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.No_Cargo_Laboral, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.No_Cargo_Laboral, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.De_Cargo_Laboral, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.De_Cargo_Laboral, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.De_Cargo_Laboral, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group hidden">
            @Html.LabelFor(model => model.Estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Estado, new { htmlAttributes = new { @Readonly = "readonly", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-default" />
            </div>
        </div>
    </div>
</center>
}

<script type="text/javascript">
    $(function () {
        $.validator.unobtrusive.parse("#editForm");

        //Todo lo de abajo es para el SignalR
        $('#inUse').addClass('hidden');//Cuando el modal se abra
        cargolaboral.addCargolaboral("@Model.Id");//Añadimos el id a la lista de bloqueos
        cargolaboral.validate("@Model.Id");
    });

    cargolaboral.closeModal = function () {
        //Cuando salgo del modal sin guardar, abajo hacemos que se libere el modal
        if (!cargolaboral.recordInUse)
            cargolaboral.removeCargolaboral("@Model.Id");
    }
</script>

@model Visitas.Models.Visitass

<center>
    <h2 class="marron">Finalizar la visita</h2>
</center>
@Messages.Message("inUse", "Edit", "danger", "Esta visita esta en uso en este momento.")

@*(Acion , el controlador donde se ubica el action que llamaremos)*@
@using (Ajax.BeginForm("Edit", new { Controller = "Visita" },
    new AjaxOptions
    {
        HttpMethod = "POST", //Indicamos el tipo del metodo, sea POST O GET
        InsertionMode = InsertionMode.Replace, // En caso exista, insercion de codigo HTML
        UpdateTargetId = "modal-body", //Este modal-body, esta dentro de la estructura del modal que hemos creado
        OnSuccess = "visita.success('edit');visita.removeVisita('" + Model.Id + "');" //En el caso de existó, llamaremos a esa funcion de Javascript
        },
    htmlAttributes: new { id = "editForm" })
    )
{
    @Html.AntiForgeryToken()
    <center>
        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.Fe_Registro, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Fe_Registro, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Fe_Registro, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.Co_Pase, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Co_Pase, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Co_Pase, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Fe_Ingreso, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Fe_Ingreso, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Fe_Ingreso, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Fe_Salida, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Fe_Salida, new { htmlAttributes = new { @Value = DateTime.Now.ToString("hh:mm:ss tt"), @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Fe_Salida, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.No_Usuario_Registro, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.No_Usuario_Registro, new { htmlAttributes = new { @Readonly = "readonly", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.No_Usuario_Registro, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.No_Usuario_Modificación, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.No_Usuario_Modificación, new { htmlAttributes = new { @Readonly = "readonly", @Value = User.Identity.Name.ToString(), @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.No_Usuario_Modificación, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.No_Lugar_Reunion, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.No_Lugar_Reunion, new MultiSelectList(new[] { "SALA 1", "SALA 2", "SALA 3", "SALA DE RECEPCIÓN", "SALA DE OFICINA", "OTROS" }), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.No_Lugar_Reunion, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.Motivo, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.Motivo, new MultiSelectList(new[] { "GESTIÓN ADMINISTRATIVA", "MOTIVO INSTITUCIONAL", "PROVEEDOR DE BIENES Y/O SERVICIOS", "REUNIÓN DE TRABAJO", "VISITA PERSONAL" }), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Motivo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.VisitanteId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.VisitanteId, new SelectList(ViewBag.Visitante, "Value", "Text")@*, "Elije una opcion"*@, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.VisitanteId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.TrabajadorId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.TrabajadorId, new SelectList(ViewBag.Trabajador, "Value", "Text")@*, "Elije una opcion"*@, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TrabajadorId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.No_Estado, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.No_Estado, new { htmlAttributes = new { @Readonly = "readonly", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.No_Estado, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-4 col-md-8">
                    <input type="submit" value="Save" class="btn btn-default" id="botonDeEnviar" />
                </div>
            </div>
        </div>
    </center>
}

<script type="text/javascript">
        $(function () {
            $.validator.unobtrusive.parse("#editForm");
            //Todo lo de abajo es para el SignalR
            $('#inUse').addClass('hidden');//Cuando el modal se abra
            visita.addVisita("@Model.Id");//Añadimos el id a la lista de bloqueos
            visita.validate("@Model.Id");
        });

        visita.closeModal = function () {
            //Cuando salgo del modal sin guardar, abajo hacemos que se libere el modal
            if (!visita.recordInUse)
                visita.removeVisita("@Model.Id");
        }
</script>